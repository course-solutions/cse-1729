;#lang racket
;; 1(a)
(define (list-at l i)
  (list-ref l i))

(define (insert v l)
    (cond ((null? l) (list v))
          ((< v (car l)) (cons v l))
          (else (cons (car l) (insert v (cdr l))))))

(define (insertion-sort l)
    (define (insertion-help  dirty  clean)
        (if (null? dirty)
            clean
            (insertion-help (cdr  dirty) (insert (car  dirty) clean ))))
        (insertion-help l (list )))

(define (list-median l)
    (define (list-at l i)
        (if (equal? i 0)
            (car l)
            (list-at (cdr l) (- i 1))))
        (define (is-even x) (= (modulo x 2) 0))
        (let (( sorted (insertion-sort l)))
             (if (is-even (length l))
                 (/ (+ (list-at  sorted (floor (/ (length l) 2)))
                       (list-at  sorted  (- (floor (/ (length l) 2))  1)))2)
                   (list-at  sorted (floor (/ (length l) 2))))))

;; 2(a)
(define (explode x)
  (define (helper acc num)
    (if (= 0 num)
        (reverse acc)
        (helper (append acc (list (remainder num 10)))
                (quotient num 10))))
  (if (= x 0)
      (list 0)
      (helper (list) x)))

;; 2(b)
(define (implode l)
  (define (helper acc l)
    (if (null? l)
        acc
        (let ((first (car l))
              (rest (cdr l)))
          (helper (+ (* 10 acc) first) rest))))
  (helper 0 l))

;; 2(c)
(define (sum-list l)
  (apply + l))

(define (has-property x)
  (let* ((sum (sum-list (explode x)))
         (reversed (reverse (explode sum)))
         (a sum)
         (b (implode reversed)))
    (= (* a b) x)))

;; 2(d)
(define (find  sequence  test n)
    (define (find-aux x found)
        (let ((fx (sequence x)))
             (if (test fx)
                 (if (= (+ found 1) n)
                     fx
                     (find-aux  (+ x 1) (+ found  1)))
                 (find-aux  (+ x 1)  found ))))
             (find-aux 1 0))
         (find (lambda (x) x) has-property  1)
         (find (lambda (x) x) has-property  2)
         (find (lambda (x) x) has-property  3)
         (find (lambda (x) x) has-property  4)
